<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Union-Find - Tag | Modern-Day Software Engineering</title><link>https://unnsse.io/tags/union-find/</link><description>Modern-Day Software Engineer is Unnsse Khan's modernistic outlook on the current software engineering landscape.</description><generator>Hugo 0.148.2 &amp; FixIt v0.3.20</generator><language>en</language><managingEditor>contact@unnsse.io (Unnsse Khan)</managingEditor><webMaster>contact@unnsse.io (Unnsse Khan)</webMaster><lastBuildDate>Sat, 03 May 2025 14:45:04 -0700</lastBuildDate><atom:link href="https://unnsse.io/tags/union-find/index.xml" rel="self" type="application/rss+xml"/><item><title>2D Matrix Bounding Box Checker using Disjoint Set Union-Find (DSU) Algorithm in Java 23</title><link>https://unnsse.io/2025/05/boundingbox_05032025/</link><pubDate>Sat, 03 May 2025 14:45:04 -0700</pubDate><author>contact@unnsse.io (Unnsse Khan)</author><guid>https://unnsse.io/2025/05/boundingbox_05032025/</guid><category domain="https://unnsse.io/categories/java/">Java</category><description>&lt;h2 class="heading-element" id="introduction">&lt;span>Introduction&lt;/span>
 &lt;a href="#introduction" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>Using a &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"target="_blank" rel="external nofollow noopener noreferrer">Test Driven Development (TDD)&lt;i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true">&lt;/i>&lt;/a> approach, I wrote a Java 23 program called &lt;code>BoundingBox&lt;/code> that reads
a 2D ASCII grid from standard input and detects the largest or all non-overlapping bounding boxes enclosing
contiguous regions of asterisks (&lt;code>*&lt;/code>). It is designed to handle large inputs efficiently and uses the
&lt;a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure"target="_blank" rel="external nofollow noopener noreferrer">Disjoint Set Union-Find (DSU)&lt;i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true">&lt;/i>&lt;/a> data structure algorithm to identify
connected components. Each bounding box is defined by the minimum and maximum &lt;code>x&lt;/code> and &lt;code>y&lt;/code> coordinates
(with 1-based indexing) that surround a connected group of * characters.&lt;/p></description></item></channel></rss>
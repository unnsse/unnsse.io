<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Disjoint Set - Tag | Modern-Day Software Engineering</title>
    <link>https://unnsse.io/tags/disjoint-set/</link>
    <description>Modern-Day Software Engineer is Unnsse Khan&#39;s modernistic outlook on the current software engineering landscape.</description>
    <generator>Hugo 0.148.2 &amp; FixIt v0.3.20</generator>
    <language>en</language>
    <managingEditor>contact@unnsse.io (Unnsse Khan)</managingEditor>
    <webMaster>contact@unnsse.io (Unnsse Khan)</webMaster>
    <lastBuildDate>Sat, 03 May 2025 14:45:04 -0700</lastBuildDate>
    <atom:link href="https://unnsse.io/tags/disjoint-set/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2D Matrix Bounding Box Checker using Disjoint Set Union-Find (DSU) Algorithm in Java 23</title>
      <link>https://unnsse.io/2025/05/boundingbox_05032025/</link>
      <pubDate>Sat, 03 May 2025 14:45:04 -0700</pubDate><author>contact@unnsse.io (Unnsse Khan)</author>
      <guid>https://unnsse.io/2025/05/boundingbox_05032025/</guid>
      <category domain="https://unnsse.io/categories/java/">Java</category>
      <description>&lt;h2 class=&#34;heading-element&#34; id=&#34;introduction&#34;&gt;&lt;span&gt;Introduction&lt;/span&gt;&#xA;  &lt;a href=&#34;#introduction&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Test Driven Development (TDD)&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; approach, I wrote a Java 23 program called &lt;code&gt;BoundingBox&lt;/code&gt; that reads&#xA;a 2D ASCII grid from standard input and detects the largest or all non-overlapping bounding boxes enclosing&#xA;contiguous regions of asterisks (&lt;code&gt;*&lt;/code&gt;). It is designed to handle large inputs efficiently and uses the&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Disjoint-set_data_structure&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Disjoint Set Union-Find (DSU)&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; data structure algorithm to identify&#xA;connected components. Each bounding box is defined by the minimum and maximum &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates&#xA;(with 1-based indexing) that surround a connected group of * characters.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
